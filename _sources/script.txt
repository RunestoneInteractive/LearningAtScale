Script
======

D: Hi Brad
B: Hi David

D: What are you  working on.

B: Just trying to finish up our presentation for the Learning @ Scale Conference

D: Great, lets see what we've got

D: OK, looks like a bit of history of our two paper textbooks..

B: Yeah that seems like a long time ago, writing interactive textbooks is just so much more fun.  
D: As it is I'm happy we ran across the open source, How to think like a computer scientist to use as the basis for our CS 1 book.  Its been a little over two years since we launched this interactive textbook project.  In that time we have gone from using it in our own classrooms, to making it public, and watching it grow.  This semester we estimate that around 100 colleges, universities, or high schools have adopted one of the two textbooks we host on interactivepython.org.   Our individual traffic has grown to over 14,000 pageviews from 5,000 users a day this semester.

B:  So should we show them a live demo?

D:  Lets be a bit more cautious, and stick to what we can show on your laptop.

B:  OK, I think whats really important is to show everyone that there are really two parts to this demo, the end product, that is, part 1:  our interactivepython website and the books we host there, and part 2: the runestone interactive tools that let us build all this stuff. In fact we are demoing a brand new capability that allows you to quickly get the tools from a github repository, use them to write something as small as a short lecture exercise, and then publish them using github pages.  In fact although I'll run this demo locally you can also access this demo at http://runestoneinteractive.org/LearningAtScale

To connect with what we heard this morning and early afternoon, this is an authoring tool that could easily be used to create content for use in a MOOC.  Or it could be used instead of a MOOC.  In a sense that is what we are doing, using the book in our classroom, but we get thousands of people who just want to learn CS reading the book.

D: Right, so I think for the first part of the demo we should focus on demonstrating some of the different ways we are able to reach students who use different learning techniques.

ActiveCode
==========

B: I thought we would start with activecode, since that gets the most use, and it was kind of the aha moment with this whole project.  When we realized that we could embed a Python interpreter in the browser, and allow students to actually change the example code in the book I knew we were on to something special.  So, I've got my favorite fractal tree example here.

D: Ok, thats great but you kind of used the boring version.  Can't you add in  a bit of 

B: (while typing) yeah I'm on it.

D: So, this is just what we would hope a student is motivated to do, try the example code and then mess around with it a bit.  One of the interesting things about having an interactive textbook is that you can actually know what your students are doing.  Over time we have collected every click from every student.  To date we know that we have had 5.4 million uses of an activecode activity. (ad-lib until Brad is done)  Thats much nicer.

B: And even though we are showing you Python here, the activecode could also be either Javascript or HTML, so you are not limited to only writing about Python.

CodeLens
========

D: So, experimentation is one way we want to reach our students, but another important aspect of CS1 is to try to help students create a mental model for how Python works.  We call this aspect of the book CodeLens.

B:  For this we turned to Philip Guo's excellent Python Tutor project.  Although for purposes of the textbook we don't allow students to edit this code.
(Brad begins stepping through the example)

D: CodeLens is a bit like a debugger, but better because it allows students to step forward an backward through the code and watch variables and data structures as they change. For helping students understand that python variables are simply references to objects in memory this is really a nice tool.  But I see that you don't have a function, so we can't demo a frame for a function call.

B: No problem, but for this, I'm going to have to edit the source and rebuild the demo.  (Brad begins editing)

D: In case you haven't put this together yet, we are actually building this demo using the same tools we use for writing a book.  We have a new, simplified repository on github that you can just checkout and go, if you want to use the tools to build something simple.

B: Yes, notice that the big complex diagram generated by codelens  only takes this much effort to write in the source. I can rebuild the demo with a single command ``paver build`` and if I wanted to publish this online for anyone to read I could deploy it with ``paver deploy`` and it would publish this for the world using Github Pages.  We are really hoping this will encourage more people to start creating their own content.  (back to the browser)

Video
=====

D: Video is another way that we think we can reach students, and we use them in a couple of different ways,  Either to explain, verbally the same content that is presented textually in  a section, OR, to present the solution to a particular problem we have posed for the student.

B:  About 2.5% of our page views result in some kind of video event.  That is lower than I would have expected for this generation of students, but video is an area where we can do a lot of work.  Our videos are put together pretty quickly without a lot of processing or special effects.  It would be interesting to see if this number would change if the videos had a high quality.

Multiple Choice
===============

D: Now, one way of motivating your students to read is to give them quizzes on the reading assignment.  So we have developed a way to incorporate interactive quizzes right into the text.  We have worked together with Mark Guzdial and his group at Georgia tech on a lot of these, and in particular they have developed a huge number of the questions in the CS1 text.

B:  We have several different question types on this page, which also demonstrates our little reveal widget that you can use to hide content until you are ready for the student to see it.  We have multiple choice with single answer, multiple choice with multiple answers, fill in the blank with regular expression matching, and Codelens questions that stop you in the middle, as you are moving through the code and ask you to predict a value for a variable or what the next line executed will be.  I'll just open up a multiple choice question to give you an idea of what they look like.  Overall we have collected over 1.5 million answers to the various multiple choice questions in the book.  

The other interesting facet of these multiple choice questions is that students can get immediate feedback on how they compare with their peers.  For this I'll quickly jump to my course from last fall.

D: We had an idea that we could engage students with the book, and even with homework problems more effectively by allowing them to discuss the homework problems.  This is in part because our book is addressing such diverse audiences.  One of the big things we heard from our users was, can we see the answers to homework problem X?  Well, we decided to compromise and provide solutions to the odd numbered problems, but also to provide a discussion area for those problems.  Brad is showing you that now.  

B:  You can see that for odd numbered problems we have three tabs:  One for the question, One for the answer, and one for discussion.

B: Homework problems are another area where we have collected a tremendous amount of data.  We have collected 4.2 million runs of these homework problems, including any error messages the student got when they clicked run.  Its really fascinating to go back and replay a particular student on some assignment.  In some cases you can really get a sense for their thought process as they worked to solve a problem, and in other cases its amazing to see the seemingly random steps they follow.  David, I just realized we left out one of our most interesting problem types.

Parson's
========

D:  Oh Yeah, parson's problems.
B:  Well this gives me a good chance to show how you can organize and include content in a book or presentation like this.  The overall flow is controlled by an index file, and a table of contents directive.  Each section or chapter is contained in its own file.  So, to add in the parson's problem page, I can simply uncomment this line here.  Save and rebuild.  Once again I can publish an update to the website by doing a paver deploy.

D: Now parson's problems are pretty interesting, and an effective way, especially early on to help students think about programming.  Here are all the lines  you need, in some scrambled up order, now can you put them together.  The really interesting thing about the parson's problems is that at the end we are just comparing the order and indentation of some blocks.  We don't need any real knowledge of the language, so Parson's problems can be written for Python, Java, Javscript, you name it.


Conclusion
==========

So this is our demo of the highlights of the Runestone Interactive tools, and some information on how the tools are used in a couple of books.  We are really excited to see other authors using the tools to publish their own books, and we are hopeful that our new system for publishing directly on github will encourage other instructors to give this a try for their own class materials.

* http://runestoneinteractive.org
* http://interactivepython.org
* https://github.com/RunestoneInteractive/RunestoneTools

If you have any questions, or ideas, or would just like to discuss this with us further, please find us in the hall afterward, or anytime you see us.  We'll be around through Friday.







